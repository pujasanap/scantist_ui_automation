package stepDef;

import static org.junit.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.asserts.SoftAssert;

import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import utility.Utility;

public class VulnerabilityScanResult {

	public static WebDriver driver;

	public VulnerabilityScanResult() {
		this.driver = Hook.getDriver();
	}
    
	@Then("^Validate the vulnerability scan result page$")
	public void validate_the_vulnerability_scan_result_page() throws Throwable {
		Thread.sleep(1000);
		String pageTitle = driver.findElement(By.xpath("//a[text()='Vulnerability Results']")).getText();
		String expectedPageTitle = "Vulnerability Results";
		assertEquals(pageTitle, expectedPageTitle);
	}
     
	@When("^get and validate the overall section of vulernability scan result page$")
	public void get_and_validate_the_overall_section_of_vulernability_scan_result_page() throws Throwable {

		if (driver.findElement(By.xpath("(//h5[normalize-space(text()='Overall')])[1]")).isDisplayed()) {

			WebElement ele1 = driver.findElement(By.xpath("(//span[@class='category'])[1]"));
			String issueFound = ele1.getText();
			System.out.println("\nIssueFound :-" + issueFound);
			if (ele1.isDisplayed()) {

				if (!issueFound.equalsIgnoreCase("No Issues Found")) {

					String issueFoundValue = issueFound.replaceAll("[^0-9]", "");
					Utility.isStringInteger(issueFoundValue);

					System.out.println("\nIssueFoundValue :-" + issueFoundValue);

					if (Integer.parseInt(issueFoundValue) > 0) {
						//System.out.println("\n Issue found value is integer value and greater than zero");
						driver.findElement(By.xpath("//canvas[@id='0-chart-chart'][1]")).isDisplayed();

					}
				} else {

					System.out.println("\nIssue Found :-" + issueFound);
					driver.findElement(By.xpath("(//*[@id='Layer_1'])[1]")).isDisplayed();
				}

			}
		}
	}
    
	@When("^get and validate the security warning section of vulernability scan result page$")
	public void get_and_validate_the_security_warning_section_of_vulernability_scan_result_page() throws Throwable {

		if (driver.findElement(By.xpath("(//h5[normalize-space(text()='Security Warning ')])[2]")).isDisplayed()) {

			WebElement ele1 = driver.findElement(By.xpath("(//span[@class='category'])[2]"));
			String issueFound = ele1.getText();
			if (ele1.isDisplayed()) {

				if (!issueFound.equalsIgnoreCase("No Issues Found")) {

					String issueFoundValue = issueFound.replaceAll("[^0-9]", "");
					Utility.isStringInteger(issueFoundValue);
					System.out.println("\nIssueFoundValue :-" + issueFoundValue);
					if (Integer.parseInt(issueFoundValue) > 0) {
						//System.out.println("\nIssue found value is integer value and greater than zero");
						driver.findElement(By.xpath("//canvas[@id='0-chart']")).isDisplayed();

					}
				} else {

					System.out.println("Issue Found :- " + issueFound);
					Thread.sleep(1000);
					driver.findElement(By.xpath("(//*[@id='Layer_1'])")).isDisplayed();
				}

			}
		}

		
		WebElement infoButton = driver.findElement(By.xpath("(//i[@class='el-tooltip fas fa-info-circle icon-primary'])[1]"));
		Actions actions = new Actions(driver);
		actions.moveToElement(infoButton).perform();
		WebElement toolTip = driver.findElement(By.xpath("//div[text()='Partial or low-confidence matches for CVEs and Security Bugs found during the scan process']"));

		String toolTipText = toolTip.getText();
		Assert.assertEquals(toolTipText, "Partial or low-confidence matches for CVEs and Security Bugs found during the scan process");
	}

	@When("^get and validate the security bug section of vulernability scan result page$")
	public void get_and_validate_the_security_bug_section_of_vulernability_scan_result_page() throws Throwable {
		if (driver.findElement(By.xpath("(//h5[normalize-space(text()='Overall')])[3]")).isDisplayed()) {

			WebElement ele1 = driver.findElement(By.xpath("(//span[@class='category'])[3]"));
			String issueFound = ele1.getText();
			if (ele1.isDisplayed()) {

				if (!issueFound.equalsIgnoreCase("No Issues Found")) {

					String issueFoundValue = issueFound.replaceAll("[^0-9]", "");
					Utility.isStringInteger(issueFoundValue);
					System.out.println("\nIssueFoundValue :-" + issueFoundValue);
					if (Integer.parseInt(issueFoundValue) > 0) {
						//System.out.println("\nIssue found value is integer value and greater than zero");
						driver.findElement(By.xpath("//canvas[@id='2-chart-chart']")).isDisplayed();

					}
				} else {

					System.out.println("\nIssue Found :-" + issueFound);
					driver.findElement(By.xpath("(//*[@id='Layer_1'])[2]")).isDisplayed();
				}

			}
		}
		
		WebElement infoButton = driver.findElement(By.xpath("(//i[@class='el-tooltip fas fa-info-circle icon-primary'])[2]"));
		Actions actions = new Actions(driver);
		actions.moveToElement(infoButton).perform();
		WebElement toolTip = driver.findElement(By.xpath("//div[text()='Vulnerabilities discovered by the team from other sources like library changelogs, bug-trackers and security advisories']"));

		String toolTipText = toolTip.getText();
		Assert.assertEquals(toolTipText, "Vulnerabilities discovered by the team from other sources like library changelogs, bug-trackers and security advisories");

	}

	@When("^get and validate the cve section of vulernability scan result page$")
	public void get_and_validate_the_cve_section_of_vulernability_scan_result_page() throws Throwable {

		if (driver.findElement(By.xpath("(//h5[normalize-space(text()='Overall')])[4]")).isDisplayed()) {

			WebElement ele1 = driver.findElement(By.xpath("(//span[@class='category'])[4]"));
			String issueFound = ele1.getText();
			if (ele1.isDisplayed()) {

				if (!issueFound.equalsIgnoreCase("No Issues Found")) {

					String issueFoundValue = issueFound.replaceAll("[^0-9]", "");
					Utility.isStringInteger(issueFoundValue);
					System.out.println("\nIssueFoundValue :-" + issueFoundValue);
					if (Integer.parseInt(issueFoundValue) > 0) {
					//	System.out.println("\nIssue found value is integer value and greater than zero");
						driver.findElement(By.xpath("//canvas[@id='3-chart-chart']")).isDisplayed();

					}
				} else {

					System.out.println("\nIssue Found :-" + issueFound);
					driver.findElement(By.xpath("(//*[@id='Layer_1'])[4]")).isDisplayed();
				}

			}
		}
		
		WebElement infoButton = driver.findElement(By.xpath("(//i[@class='el-tooltip fas fa-info-circle icon-primary'])[3]"));
		Actions actions = new Actions(driver);
		actions.moveToElement(infoButton).perform();
		WebElement toolTip = driver.findElement(By.xpath("//div[text()='Known-vulnerabilities as maintained by NVD']"));

		String toolTipText = toolTip.getText();
		Assert.assertEquals(toolTipText, "Known-vulnerabilities as maintained by NVD");


	}

	@When("^Click on ALL tab$")
	public void click_on_ALL_tab() throws Throwable {
		driver.findElement(By.tagName("body")).sendKeys(Keys.PAGE_DOWN);
		Thread.sleep(2000);
		driver.findElement(By.xpath("(//span[@class='el-radio-button__inner'])[1]")).click();

	}

	@Then("^Displaying all vulernabilities$")
	public void displaying_all_vulernabilities() throws Throwable {
		System.out.println("\nDisplaying all vulnerabilities");
	}

	@When("^Click on CVE tab$")
	public void click_on_CVE_tab() throws Throwable {
		driver.findElement(By.tagName("body")).sendKeys(Keys.PAGE_DOWN);

		Thread.sleep(5000);
		driver.findElement(By.xpath("(//span[@class='el-radio-button__inner'])[2]")).click();
	}

	@Then("^Displaying all CVE's$")
	public void displaying_all_CVE_s() throws Throwable {
		System.out.println("\nDisplaying all CVE's");

	}

	@When("^Click on BUG tab$")
	public void click_on_BUG_tab() throws Throwable {
		driver.findElement(By.tagName("body")).sendKeys(Keys.PAGE_DOWN);

		Thread.sleep(3000);
		driver.findElement(By.xpath("(//span[@class='el-radio-button__inner'])[3]")).click();
	}

	@Then("^Displaying all Security Bug$")
	public void displaying_all_Security_Bug() throws Throwable {
		System.out.println("\nDisplaying all Security bugs");
	}

	@When("^Click on WRN tab$")
	public void click_on_WRN_tab() throws Throwable {
		Thread.sleep(2000);
		driver.findElement(By.xpath("(//span[@class='el-radio-button__inner'])[4]")).click();
	}

	@Then("^Displaying all Security Warning$")
	public void displaying_all_Security_Warning() throws Throwable {
		System.out.println("\nDisplaying all Warning's");
	}

	
	@When("^Click on supress to supress the vulnerbaility$")
	public void click_on_supress_to_supress_the_vulnerbaility() throws Throwable {
		Thread.sleep(1000);
		driver.findElement(By.xpath("(//input[@type='search'])[1]")).sendKeys("CVE-2019-5427");
		driver.findElement(By.xpath("(//input[@type='search'])[1]")).sendKeys(Keys.ENTER);
		Thread.sleep(5000);
		
		WebElement ele = driver.findElement(By.xpath("(//p[normalize-space(normalize-space()='CVE-2016-8735')]/preceding::span[@class='el-checkbox__inner'][1])[1]"));
		JavascriptExecutor executor = (JavascriptExecutor)driver;
		executor.executeScript("arguments[0].click();", ele);
		

		String vulnerabilityDetails = driver.findElement(By.xpath("(//tr[@class='el-table__row'])[1]")).getText();
		System.out.println("\nVulnerabillity Details :-"+"\n"+vulnerabilityDetails);	
		 
		  
		WebDriverWait wait1 = new WebDriverWait(driver,1000);
		wait1.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[normalize-space()='Action']")));
		driver.findElement(By.xpath("//button[normalize-space()='Action']")).click();
		
//		WebElement button = driver.findElement(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div"));
//		
//		if (button.isDisplayed()) {
//			String buttonText = button.getText();
//			System.out.println(buttonText);
//			if (buttonText.equalsIgnoreCase("Suppress")) {
//				Thread.sleep(1000);
//				button.click();
//			}
//		}
		Thread.sleep(3000);
			driver.findElement(By.xpath("//ul/li/div[text()='Suppress']")).click();
	}

	@Then("^Validate the issue supression$")
	public void validate_the_issue_supression() throws Throwable {
		
		new WebDriverWait(driver, 5000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//p[text()='Suppressed successfully']")));
	    String supressMessage = driver.findElement(By.xpath("//p[text()='Suppressed successfully']")).getText();
		if (supressMessage.contains("Suppressed successfully")) {
	        System.out.println("\n"+supressMessage);
	    } else {
	        System.out.println("Something Wrong....!!!");
	    }
	   
	}
	
	@When("^Click on unsupress to unsupress the vulnerbaility$")
	public void click_on_unsupress_to_unsupress_the_vulnerbaility() throws Throwable {
		Thread.sleep(2000);
		WebElement ele = driver.findElement(By.xpath("(//p[normalize-space(normalize-space()='CVE-2016-8735')]/preceding::span[@class='el-checkbox__inner'][1])[1]"));
		JavascriptExecutor executor = (JavascriptExecutor)driver;
		executor.executeScript("arguments[0].click();", ele);
		
	//	String vulnerabilityDetails = driver.findElement(By.xpath("(//tr[@class='el-table__row'])[1]")).getText();
	//	System.out.println("\nVulnerabillity Details :-"+"\n"+vulnerabilityDetails);	
		 
		  
		WebDriverWait wait = new WebDriverWait(driver,1000);
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[normalize-space()='Action']")));
		driver.findElement(By.xpath("//button[normalize-space()='Action']")).click();
		
			driver.findElement(By.xpath("//ul/li/div[text()='Unsuppress']")).click();
	}

	@Then("^Validate the issue unsupression$")
	public void validate_the_issue_unsupression() throws Throwable {

		new WebDriverWait(driver, 5000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//p[text()='Unsuppressed Successfully']")));
	    String unsupressMessage = driver.findElement(By.xpath("//p[text()='Unsuppressed Successfully']")).getText();
		if (unsupressMessage.contains("Unsuppressed Successfully")) {
	        System.out.println("\n"+unsupressMessage);
	    } else {
	        System.out.println("Something Wrong....!!!");
	    }
	}
	
	@When("^Click on the fix issues$")
	public void click_on_the_fix_issues() throws Throwable {
		Thread.sleep(3000);
	    driver.findElement(By.xpath("//button/span[text()='Fix Issues']")).click();
	    
	}

	@When("^Click on the component which vulnerabilities group want to create pull request and create bulk pull request$")
	public void click_on_the_component_which_vulnerabilities_group_want_to_create_pull_request_and_create_bulk_pull_request() throws Throwable {
	    Thread.sleep(1000);
	    String winHandleBefore = driver.getWindowHandle();

	 for(String winHandle : driver.getWindowHandles()){
	     driver.switchTo().window(winHandle);
	    
	    driver.findElement(By.xpath("//div/span[text()='Fix Issues']")).click(); 
	    driver.findElement(By.tagName("body")).sendKeys(Keys.PAGE_DOWN);
	    driver.findElement(By.tagName("body")).sendKeys(Keys.PAGE_DOWN);

	    WebDriverWait wait = new WebDriverWait(driver, 2000);
	    wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//td/div[normalize-space()='c3p0']/preceding::span[@class='el-checkbox__inner'][1])[3]")));
	    driver.findElement(By.xpath("(//td/div[normalize-space()='c3p0']/preceding::span[@class='el-checkbox__inner'][1])[3]")).click();
	    driver.findElement(By.xpath("//button/span[text()='Create Pull Request']")).click();
	    
	 }
	    
	}

	@Then("^Validate the pull request created$")
	public void validate_the_pull_request_created() throws Throwable {
	    
		WebDriverWait wait = new WebDriverWait(driver, 5000);
	    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//p[text()='Pull Request created successfully']")));
	    String bulkPRmessage = driver.findElement(By.xpath("//p[text()='Pull Request created successfully']")).getText();
		
	    if (bulkPRmessage.contains("Pull Request created successfully")) {
	        System.out.println(bulkPRmessage);
	    } else {
	        System.out.println("Something Wrong....!!!");
	    }
	    
	}

	@When("^Click on download report button$")
	public void click_on_download_report_button() throws Throwable {

		Thread.sleep(8000);
		WebElement button = driver.findElement(By.xpath("(//button)[5]"));
		String buttonText = button.getText();
		System.out.println("buttonText"+buttonText);
		if (buttonText.equalsIgnoreCase("Download")) {
			button.click();
		} else if (buttonText.equalsIgnoreCase("Export")) {
			button.click();
//			WebDriverWait wait = new WebDriverWait(driver, 5000);
//			if (wait.until(ExpectedConditions.textToBePresentInElement(button, "Download"))) {
//				button.click();
//				
//				driver.navigate().refresh();
//			}
		}

	}

	@When("^download pdf version of vulnerability report$")
	public void download_pdf_version_of_vulnerability_report() throws Throwable {
		driver.findElement(By.xpath("//div[@id='tab-issueList']")).click();
		driver.findElement(By.tagName("body")).sendKeys(Keys.PAGE_DOWN);
		driver.findElement(By.tagName("body")).sendKeys(Keys.PAGE_DOWN);
		new WebDriverWait(driver, 5000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='PDF']")));
		WebElement ele = driver.findElement(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='PDF']"));
		JavascriptExecutor executor = (JavascriptExecutor)driver;
		executor.executeScript("arguments[0].click();", ele);
		
	}

	@When("^download csv version of vulnerability report$")
	public void download_csv_version_of_vulnerability_report() throws Throwable {
		driver.findElement(By.xpath("//form/div[2]/button/span")).click();
		new WebDriverWait(driver, 2000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='CSV']")));
		driver.findElement(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='CSV']")).click();
	}

	@When("^download xml version of vulnerability report$")
	public void download_xml_version_of_vulnerability_report() throws Throwable {
		driver.findElement(By.xpath("//form/div[2]/button/span")).click();
		new WebDriverWait(driver, 2000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='XML']")));
		driver.findElement(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='XML']")).click();
	}

	@When("^download json version of vulnerability report$")
	public void download_json_version_of_vulnerability_report() throws Throwable {
		new WebDriverWait(driver, 2000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='JSON']")));
		driver.findElement(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='JSON']")).click();
	}
	
	@When("^Click on view button$")
	public void click_on_view_button() throws Throwable {
		WebElement ele = driver.findElement(By.xpath("(//p[normalize-space(normalize-space()='CVE-2019-5427')]/preceding::span[@class='el-checkbox__inner'][1])[1]"));
		JavascriptExecutor executor = (JavascriptExecutor)driver;
		executor.executeScript("arguments[0].click();", ele);
		
		new WebDriverWait(driver, 2000).until(ExpectedConditions.elementToBeClickable(By.xpath("(//p[text()='View'])[1]")));
		driver.findElement(By.xpath("(//p[text()='View'])[1]")).click();
	}

	@Then("^Validate the CVE information$")
	public void validate_the_CVE_information() throws Throwable {
	    System.out.println("\n"+"CVE Details ==>"+"\n"+driver.findElement(By.xpath("//div[@class='card issue-card']")).getText());
	    
	}


	@Then("^add the issue action information$")
	public void add_the_issue_action_information() throws Throwable {
	     new WebDriverWait(driver, 3000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[1]")));
	     driver.findElement(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[1]")).click();
	     
	     new WebDriverWait(driver, 3000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[text()='Fixed']")));
	     driver.findElement(By.xpath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[text()='Fixed']")).click();

	     new WebDriverWait(driver, 3000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[2]")));
	     driver.findElement(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[2]")).click();

	     new WebDriverWait(driver, 3000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[text()='High']")));
	     driver.findElement(By.xpath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[text()='High']")).click();
	
	     new WebDriverWait(driver, 3000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[3]")));
	     driver.findElement(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[3]")).click();

	     new WebDriverWait(driver, 3000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[text()='scantist3']")));
	     driver.findElement(By.xpath("//ul[@class='el-scrollbar__view el-select-dropdown__list']/li[text()='scantist3']")).click();

	     new WebDriverWait(driver, 3000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//textarea[@placeholder='Add some comments here']")));
	     driver.findElement(By.xpath("//textarea[@placeholder='Add some comments here']")).clear();
	     driver.findElement(By.xpath("//textarea[@placeholder='Add some comments here']")).sendKeys("add comment");
	}

	@When("^click on action$")
	public void click_on_action() throws Throwable {
		Thread.sleep(5000);
	     driver.findElement(By.xpath("//button/span[normalize-space()='Action']")).click();
	}

	@Then("^supress the issue$")
	public void supress_the_issue() throws Throwable {
	    new WebDriverWait(driver, 5000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='Suppress']")));
	    driver.findElement(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='Suppress']")).click();
	    
	    new WebDriverWait(driver, 5000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//p[text()='This issue has been suppressed.']")));
	    String issueSupress = driver.findElement(By.xpath("//p[text()='This issue has been suppressed.']")).getText();
		if (issueSupress.contains("This issue has been suppressed.")) {
	        System.out.println("\n"+issueSupress);
	    } else {
	        System.out.println("Something Wrong....!!!");
	    }
	
	}

	@Then("^unsupress the issue$")
	public void unsupress_the_issue() throws Throwable {
		Thread.sleep(1000);

		  driver.findElement(By.xpath("//ul[@class='el-dropdown-menu el-popper']/li/div[text()='Unsuppress']")).click();
		    
		    new WebDriverWait(driver, 5000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//p[text()='This issue has been unsuppressed.']")));
		    String issueUnSupress = driver.findElement(By.xpath("//p[text()='This issue has been unsuppressed.']")).getText();
			if (issueUnSupress.contains("This issue has been unsuppressed.")) {
		        System.out.println("\n"+issueUnSupress);
		    } else {
		        System.out.println("Something Wrong....!!!");
		    }
	}

	@Then("^create github github issue$")
	public void create_github_github_issue() throws Throwable {
	    new WebDriverWait(driver, 5000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[text()='Create Github Issue']")));

	    driver.findElement(By.xpath("//div[text()='Create Github Issue']")).click();
		
		
		Thread.sleep(5000);
	
		ArrayList<String> windowHandles = new ArrayList<String> (driver.getWindowHandles());
		driver.switchTo().window(windowHandles.get(1));
		
		if(driver.findElement(By.xpath("//input[@id='login_field']")).isDisplayed()==true) {
	    driver.findElement(By.xpath("//input[@id='login_field']")).sendKeys("scantist3@gmail.com");
	    driver.findElement(By.xpath("//input[@name='password']")).sendKeys("Pooja1234567890");
	    driver.findElement(By.xpath("//input[@type='submit']")).click();
		}
	    Thread.sleep(2000);
	    driver.findElement(By.xpath("(//button[normalize-space()='Submit new issue'])[1]")).click();
	    
	    new WebDriverWait(driver, 5000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1/span[normalize-space()='CVE-2019-5427']")));
	    WebElement githubIssue = driver.findElement(By.xpath("//h1/span[normalize-space()='CVE-2019-5427']"));    
	    Assert.assertEquals(githubIssue.getText(), "CVE-2019-5427");
	    
	    new WebDriverWait(driver, 2000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//summary[@aria-label='View profile and more']")));
	    driver.findElement(By.xpath("//summary[@aria-label='View profile and more']")).click();
	    driver.findElement(By.xpath("(//button[@type='submit'][normalize-space()='Sign out'])[2]")).click();
	    
	    driver.close();
		driver.switchTo().window(windowHandles.get(0));

	}
	
	@Then("^create github jira ticket$")
	public void create_github_jira_ticket() throws Throwable {
		Thread.sleep(5000);
		
	   driver.findElement(By.xpath("//div[text()='Create JIRA Ticket']")).click();
	   String subWindowHandler = null;

		Set<String> handles = driver.getWindowHandles();
		Iterator<String> iterator = handles.iterator();
		while (iterator.hasNext()) {
			subWindowHandler = iterator.next();
		}
		driver.switchTo().window(subWindowHandler);
		Thread.sleep(10000);

	   Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)                            
				.withTimeout(20, TimeUnit.SECONDS)          
				.pollingEvery(5, TimeUnit.SECONDS)          
				.ignoring(NoSuchElementException.class);    
				
				WebElement jiraTicketPopup= wait.until(new Function<WebDriver, WebElement>() {       
				public WebElement apply(WebDriver driver) { 
				return driver.findElement(By.xpath("//span[text()='Issue Detail']"));     
				 }  
				});  
				Thread.sleep(5000);

				
				driver.findElement(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[4]")).click();
				
				List<WebElement> projectName = driver.findElements(By.xpath("(//ul[@class='el-scrollbar__view el-select-dropdown__list'])[8]/li"));
				for(WebElement option:projectName) {

			        if(option.getText().equalsIgnoreCase("Backend"))
			         option.click();  
				}
				
				new WebDriverWait(driver, 1000).until(ExpectedConditions.elementToBeClickable(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[5]")));
				WebElement ele = driver.findElement(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[5]"));
				JavascriptExecutor jse = (JavascriptExecutor)driver;
				jse.executeScript("arguments[0].click()", ele);
				List<WebElement> IssueType = driver.findElements(By.xpath("(//ul[@class='el-scrollbar__view el-select-dropdown__list'])[8]/li"));
				for(WebElement option:IssueType) {

			        if(option.getText().equalsIgnoreCase("Bug"))
			         option.click();  
				}
				driver.findElement(By.xpath("//input[@placeholder='Please provide a summary']")).clear();
				driver.findElement(By.xpath("//input[@placeholder='Please provide a summary']")).sendKeys("TestTicket");
				
				driver.findElement(By.xpath("(//i[@class='el-select__caret el-input__icon el-icon-arrow-up'])[9]")).click();
				List<WebElement> assignee = driver.findElements(By.xpath("(//ul[@class='el-scrollbar__view el-select-dropdown__list'])[9]/li"));
				for(WebElement option:assignee) {

			        if(option.getText().equalsIgnoreCase("Pooja Sanap"))
			         option.click();  
				}
				
				driver.findElement(By.xpath("//span[text()='Create']")).click();
				Thread.sleep(10000);
//				WebElement ticketCreated = driver.findElement(By.xpath("//span[text()='Ticket created successfully']"));
//				String ticketCreatedMessage = "Ticket created successfully";
//				Assert.assertEquals(ticketCreated.getText(), ticketCreatedMessage);
				driver.findElement(By.xpath("//span[text()='OK']")).click();
	}


	@When("^validate the hyperlink$")
	public void validate_the_hyperlink() throws Throwable {
		System.out.println("\nHyperlinks :-");
	    Utility.verifyLink();
	}
	

	@When("^validate remediation information$")
	public void validate_remediation_information() throws Throwable {
	    driver.findElement(By.xpath("//h4[text()='Issue Action']")).click();
	    driver.findElement(By.tagName("body")).sendKeys(Keys.PAGE_DOWN);
		SoftAssert softAssertion= new SoftAssert();

		//Vulnerable Component 
		if(driver.findElement(By.xpath("//div/span[text()='Vulnerable Component']")).isDisplayed()) {
			String vulnerable_Component = driver.findElement(By.xpath("(//div[@class='col-md-4']/div[2])[1]")).getText();
			//System.out.println("vulnerable_Component"+vulnerable_Component);
			softAssertion.assertEquals(vulnerable_Component, "c3p0 0.9.5.1");
		}
		
		//Patched Component Version 
		if(driver.findElement(By.xpath("//div/span[text()='Patched Component Version']")).isDisplayed()) {
			String patchedComponentVersion = driver.findElement(By.xpath("(//div[@class='col-md-4']/div[2])[2]")).getText();
			//System.out.println("patchedComponentVersion"+patchedComponentVersion);
			softAssertion.assertEquals(patchedComponentVersion, "c3p0 0.9.5.4");
			
		}
		
		//latest version
		if(driver.findElement(By.xpath("//div/span[text()='Latest Component Version']")).isDisplayed()) {
			String latestVersion = driver.findElement(By.xpath("(//div[@class='col-md-4']/div[2])[3]")).getText();
			softAssertion.assertEquals(latestVersion, "c3p0 0.9.5.5");
		}
		
		//Recommended Fix
		if(driver.findElement(By.xpath("//div/span[text()='Recommended Fix']")).isDisplayed()) {
			String recommendedFix = driver.findElement(By.xpath("(//div[@class='col-md-4']/div[2])[4]")).getText();
			//System.out.println("recommendedFix"+recommendedFix);

			softAssertion.assertEquals(recommendedFix, "c3p0 0.9.5.1 > 0.9.5.4");
		}
		
		//Fix Compatibility
		if(driver.findElement(By.xpath("//div/span[text()='Fix Compatibility']")).isDisplayed()) {
			String fixCompatibility = driver.findElement(By.xpath("(//div[@class='col-md-4']/div[2])[5]")).getText();
			//System.out.println("fixCompatibility"+fixCompatibility);

			softAssertion.assertEquals(fixCompatibility, "HIGH");

		}
		
	}

	@When("^Create pull request$")
	public void create_pull_request() throws Throwable {		
			   if(driver.findElement(By.xpath("//button[text()='Created']")).isDisplayed()) {
				   System.out.println("\nCreate pull request button is present");
			   }else {
				   System.out.println("\nCreate pull request button is not present");

			   }
			   
	}
	
	
	@Then("^validate created pull request$")
	public void validate_created_pull_request() throws Throwable {
		new WebDriverWait(driver, 2000).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//p[text()='Successfully Created Pull Request']")));
	    String pullRequest = driver.findElement(By.xpath("//p[text()='Successfully Created Pull Request']")).getText();

	    if(pullRequest.equalsIgnoreCase("Successfully Created Pull Request")) {
	    	System.out.println("Pull request created");
	    }else {
	    	System.out.println("Something Wrong...!!!");

	    }
		
	}
	
}
